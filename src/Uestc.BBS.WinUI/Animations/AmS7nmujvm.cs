//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.2.250604.1+b02a3ee244
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile AmS7nmujvm.json
//       
//       Input file:
//           AmS7nmujvm.json (27049 bytes created 1:12+08:00 Aug 21 2025)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    78 |
// |--------------------------+-------|
// | Expression animators     |     1 |
// | KeyFrame animators       |     7 |
// | Reference parameters     |     1 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     3 |
// | ShapeVisuals             |     3 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |     6 |
// |--------------------------+-------|
// | Brushes                  |     7 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     2 |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas;
using Microsoft.Graphics.Canvas.Effects;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        newScene
    // Frame rate:  30 fps
    // Frame count: 53.999998569488525
    // Duration:    1800.0 mS
    public partial class AmS7nmujvm
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 1.800 seconds.
        internal const long c_durationTicks = 17999999;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            var res = 
                new AmS7nmujvm_AnimatedVisual(
                    compositor
                    );
                res.CreateAnimations();
                return res;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 53.9999985694885;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 30d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(17999999);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 53.9999985694885;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        public partial class AmS7nmujvm_AnimatedVisual
            : Microsoft.UI.Xaml.Controls.IAnimatedVisual
            , Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 17999999;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            CompositionColorBrush _colorBrush_AlmostDodgerBlue_FF126DFF;
            CompositionColorBrush _colorBrush_AlmostLightBlue_FFA6C7FF;
            CompositionSpriteShape _spriteShape_0;
            CompositionSpriteShape _spriteShape_1;
            CompositionSpriteShape _spriteShape_2;
            CompositionSpriteShape _spriteShape_3;
            CompositionSpriteShape _spriteShape_4;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ScalarKeyFrameAnimation _rotationAngleInDegreesScalarAnimation_m4_to_m4;
            StepEasingFunction _holdThenStepEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // - - - Layer aggregator
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(34F, 33F));
                    builder.AddLine(new Vector2(34F, 5.73999977F));
                    builder.AddCubicBezier(new Vector2(34F, 4.21999979F), new Vector2(33.4000015F, 2.75999999F), new Vector2(32.3400002F, 1.67999995F));
                    builder.AddCubicBezier(new Vector2(31.2800007F, 0.600000024F), new Vector2(29.8299999F, 0F), new Vector2(28.3299999F, 0F));
                    builder.AddLine(new Vector2(5.65999985F, 0F));
                    builder.AddCubicBezier(new Vector2(4.15999985F, 0F), new Vector2(2.72000003F, 0.610000014F), new Vector2(1.65999997F, 1.69000006F));
                    builder.AddCubicBezier(new Vector2(0.600000024F, 2.76999998F), new Vector2(0F, 4.23000002F), new Vector2(0F, 5.75F));
                    builder.AddLine(new Vector2(0F, 33F));
                    builder.AddLine(new Vector2(34F, 33F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(33.7299995F, 33.4900017F));
                    builder.AddCubicBezier(new Vector2(34.1500015F, 33.4000015F), new Vector2(34.5699997F, 33.4900017F), new Vector2(35F, 33.4900017F));
                    builder.AddLine(new Vector2(35F, 33.3600006F));
                    builder.AddCubicBezier(new Vector2(35.4300003F, 33.3400002F), new Vector2(35.8600006F, 33.3800011F), new Vector2(36.2799988F, 33.4700012F));
                    builder.AddLine(new Vector2(70F, 40.9700012F));
                    builder.AddLine(new Vector2(70F, 5.84000015F));
                    builder.AddCubicBezier(new Vector2(70F, 4.28999996F), new Vector2(69.3799973F, 2.80999994F), new Vector2(68.2900009F, 1.71000004F));
                    builder.AddCubicBezier(new Vector2(67.1999969F, 0.610000014F), new Vector2(65.7200012F, 0F), new Vector2(64.1699982F, 0F));
                    builder.AddLine(new Vector2(5.82999992F, 0F));
                    builder.AddCubicBezier(new Vector2(4.28000021F, 0F), new Vector2(2.79999995F, 0.620000005F), new Vector2(1.71000004F, 1.71000004F));
                    builder.AddCubicBezier(new Vector2(0.620000005F, 2.79999995F), new Vector2(0F, 4.28999996F), new Vector2(0F, 5.84000015F));
                    builder.AddLine(new Vector2(0F, 41F));
                    builder.AddLine(new Vector2(33.7299995F, 33.4900017F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(57.2999992F, 14.7200003F));
                    builder.AddCubicBezier(new Vector2(56.9099998F, 13.9799995F), new Vector2(56.3699989F, 13.3199997F), new Vector2(55.7099991F, 12.8100004F));
                    builder.AddCubicBezier(new Vector2(55.0499992F, 12.3000002F), new Vector2(54.2799988F, 11.9399996F), new Vector2(53.4700012F, 11.75F));
                    builder.AddLine(new Vector2(1.27999997F, 0.119999997F));
                    builder.AddCubicBezier(new Vector2(0.860000014F, 0.0299999993F), new Vector2(0.430000007F, -0.0199999996F), new Vector2(0F, 0F));
                    builder.AddLine(new Vector2(0F, 46F));
                    builder.AddLine(new Vector2(43.2099991F, 46F));
                    builder.AddCubicBezier(new Vector2(44.3699989F, 46F), new Vector2(45.5099983F, 45.6500015F), new Vector2(46.4700012F, 45F));
                    builder.AddCubicBezier(new Vector2(47.4300003F, 44.3499985F), new Vector2(48.1699982F, 43.4199982F), new Vector2(48.5999985F, 42.3400002F));
                    builder.AddLine(new Vector2(57.5900002F, 19.6000004F));
                    builder.AddCubicBezier(new Vector2(57.9000015F, 18.8099995F), new Vector2(58.0400009F, 17.9699993F), new Vector2(57.9900017F, 17.1299992F));
                    builder.AddCubicBezier(new Vector2(57.9399986F, 16.2900009F), new Vector2(57.7000008F, 15.46F), new Vector2(57.2999992F, 14.7200003F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(56.7400017F, 0.0399999991F));
                    builder.AddLine(new Vector2(4.53999996F, 11.6899996F));
                    builder.AddCubicBezier(new Vector2(3.72000003F, 11.8699999F), new Vector2(2.96000004F, 12.2399998F), new Vector2(2.28999996F, 12.75F));
                    builder.AddCubicBezier(new Vector2(1.62F, 13.2600002F), new Vector2(1.07000005F, 13.9200001F), new Vector2(0.680000007F, 14.6599998F));
                    builder.AddCubicBezier(new Vector2(0.289999992F, 15.3999996F), new Vector2(0.0599999987F, 16.2199993F), new Vector2(0.00999999978F, 17.0599995F));
                    builder.AddCubicBezier(new Vector2(-0.0399999991F, 17.8999996F), new Vector2(0.100000001F, 18.75F), new Vector2(0.409999996F, 19.5300007F));
                    builder.AddLine(new Vector2(9.39999962F, 42.3199997F));
                    builder.AddCubicBezier(new Vector2(9.82999992F, 43.4099998F), new Vector2(10.5699997F, 44.3300018F), new Vector2(11.5299997F, 44.9900017F));
                    builder.AddCubicBezier(new Vector2(12.4899998F, 45.6500015F), new Vector2(13.6300001F, 46F), new Vector2(14.79F, 46F));
                    builder.AddLine(new Vector2(58F, 46F));
                    builder.AddLine(new Vector2(58F, 0.0399999991F));
                    builder.AddCubicBezier(new Vector2(57.5800018F, 0.0399999991F), new Vector2(57.1599998F, -0.0500000007F), new Vector2(56.7400017F, 0.0399999991F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Shape tree root for layer:
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 8F));
                    builder.AddCubicBezier(new Vector2(3.76999998F, 8F), new Vector2(5.44999981F, 9.02999973F), new Vector2(7.67000008F, 10.3900003F));
                    builder.AddLine(new Vector2(7.71000004F, 10.4099998F));
                    builder.AddCubicBezier(new Vector2(10.3699999F, 12.04F), new Vector2(13.5900002F, 14F), new Vector2(19.6000004F, 14F));
                    builder.AddCubicBezier(new Vector2(25.6100006F, 14F), new Vector2(28.8299999F, 12.04F), new Vector2(31.4899998F, 10.4099998F));
                    builder.AddLine(new Vector2(31.5200005F, 10.3900003F));
                    builder.AddCubicBezier(new Vector2(33.7400017F, 9.02999973F), new Vector2(35.4300003F, 8F), new Vector2(39.2000008F, 8F));
                    builder.AddCubicBezier(new Vector2(42.9700012F, 8F), new Vector2(44.6500015F, 9.02999973F), new Vector2(46.8699989F, 10.3900003F));
                    builder.AddLine(new Vector2(46.9099998F, 10.4099998F));
                    builder.AddCubicBezier(new Vector2(49.5699997F, 12.04F), new Vector2(52.7900009F, 14F), new Vector2(58.7999992F, 14F));
                    builder.AddCubicBezier(new Vector2(64.8099976F, 14F), new Vector2(68.0199966F, 12.04F), new Vector2(70.6800003F, 10.4099998F));
                    builder.AddLine(new Vector2(70.7200012F, 10.3900003F));
                    builder.AddCubicBezier(new Vector2(72.9400024F, 9.02999973F), new Vector2(74.6299973F, 8F), new Vector2(78.4000015F, 8F));
                    builder.AddCubicBezier(new Vector2(82.1699982F, 8F), new Vector2(83.8499985F, 9.02999973F), new Vector2(86.0699997F, 10.3900003F));
                    builder.AddLine(new Vector2(86.1100006F, 10.4099998F));
                    builder.AddCubicBezier(new Vector2(88.7699966F, 12.04F), new Vector2(91.9800034F, 14F), new Vector2(97.9899979F, 14F));
                    builder.AddCubicBezier(new Vector2(104F, 14F), new Vector2(107.220001F, 12.04F), new Vector2(109.879997F, 10.4099998F));
                    builder.AddLine(new Vector2(109.919998F, 10.3900003F));
                    builder.AddCubicBezier(new Vector2(112.139999F, 9.02999973F), new Vector2(113.82F, 8F), new Vector2(117.589996F, 8F));
                    builder.AddCubicBezier(new Vector2(121.360001F, 8F), new Vector2(123.050003F, 9.02999973F), new Vector2(125.269997F, 10.3900003F));
                    builder.AddLine(new Vector2(125.300003F, 10.4099998F));
                    builder.AddCubicBezier(new Vector2(127.959999F, 12.04F), new Vector2(131.190002F, 14F), new Vector2(137.199997F, 14F));
                    builder.AddCubicBezier(new Vector2(143.210007F, 14F), new Vector2(146.429993F, 12.04F), new Vector2(149.089996F, 10.4099998F));
                    builder.AddLine(new Vector2(149.119995F, 10.3900003F));
                    builder.AddCubicBezier(new Vector2(151.339996F, 9.02999973F), new Vector2(153.020004F, 8F), new Vector2(156.789993F, 8F));
                    builder.AddCubicBezier(new Vector2(160.559998F, 8F), new Vector2(162.25F, 9.02999973F), new Vector2(164.470001F, 10.3900003F));
                    builder.AddLine(new Vector2(164.509995F, 10.4099998F));
                    builder.AddCubicBezier(new Vector2(167.169998F, 12.04F), new Vector2(170.389999F, 14F), new Vector2(176.399994F, 14F));
                    builder.AddCubicBezier(new Vector2(182.410004F, 14F), new Vector2(185.630005F, 12.04F), new Vector2(188.289993F, 10.4099998F));
                    builder.AddLine(new Vector2(188.320007F, 10.3900003F));
                    builder.AddCubicBezier(new Vector2(190.539993F, 9.02999973F), new Vector2(192.229996F, 8F), new Vector2(196F, 8F));
                    builder.AddCubicBezier(new Vector2(199.770004F, 8F), new Vector2(201.449997F, 9.02999973F), new Vector2(203.669998F, 10.3900003F));
                    builder.AddLine(new Vector2(203.710007F, 10.4099998F));
                    builder.AddCubicBezier(new Vector2(206.369995F, 12.04F), new Vector2(209.589996F, 14F), new Vector2(215.600006F, 14F));
                    builder.AddCubicBezier(new Vector2(221.610001F, 14F), new Vector2(224.830002F, 12.04F), new Vector2(227.490005F, 10.4099998F));
                    builder.AddLine(new Vector2(227.520004F, 10.3900003F));
                    builder.AddCubicBezier(new Vector2(229.740005F, 9.02999973F), new Vector2(231.429993F, 8F), new Vector2(235.199997F, 8F));
                    builder.AddCubicBezier(new Vector2(238.970001F, 8F), new Vector2(240.649994F, 9.02999973F), new Vector2(242.869995F, 10.3900003F));
                    builder.AddLine(new Vector2(242.910004F, 10.4099998F));
                    builder.AddCubicBezier(new Vector2(245.570007F, 12.04F), new Vector2(248.789993F, 14F), new Vector2(254.800003F, 14F));
                    builder.AddCubicBezier(new Vector2(260.809998F, 14F), new Vector2(264.019989F, 12.04F), new Vector2(266.679993F, 10.4099998F));
                    builder.AddLine(new Vector2(266.720001F, 10.3900003F));
                    builder.AddCubicBezier(new Vector2(268.940002F, 9.02999973F), new Vector2(270.630005F, 8F), new Vector2(274.399994F, 8F));
                    builder.AddCubicBezier(new Vector2(278.170013F, 8F), new Vector2(279.850006F, 9.02999973F), new Vector2(282.070007F, 10.3900003F));
                    builder.AddLine(new Vector2(282.109985F, 10.4099998F));
                    builder.AddCubicBezier(new Vector2(284.769989F, 12.04F), new Vector2(287.980011F, 14F), new Vector2(293.98999F, 14F));
                    builder.AddCubicBezier(new Vector2(300F, 14F), new Vector2(303.220001F, 12.04F), new Vector2(305.880005F, 10.4099998F));
                    builder.AddLine(new Vector2(305.920013F, 10.3900003F));
                    builder.AddCubicBezier(new Vector2(308.140015F, 9.02999973F), new Vector2(309.820007F, 8F), new Vector2(313.589996F, 8F));
                    builder.AddCubicBezier(new Vector2(317.359985F, 8F), new Vector2(319.049988F, 9.02999973F), new Vector2(321.269989F, 10.3900003F));
                    builder.AddLine(new Vector2(321.299988F, 10.4099998F));
                    builder.AddCubicBezier(new Vector2(323.959991F, 12.04F), new Vector2(327.190002F, 14F), new Vector2(333.200012F, 14F));
                    builder.AddCubicBezier(new Vector2(339.209991F, 14F), new Vector2(342.429993F, 12.04F), new Vector2(345.089996F, 10.4099998F));
                    builder.AddLine(new Vector2(345.119995F, 10.3900003F));
                    builder.AddCubicBezier(new Vector2(347.339996F, 9.02999973F), new Vector2(349.019989F, 8F), new Vector2(352.790009F, 8F));
                    builder.AddCubicBezier(new Vector2(356.559998F, 8F), new Vector2(358.25F, 9.02999973F), new Vector2(360.470001F, 10.3900003F));
                    builder.AddLine(new Vector2(360.51001F, 10.4099998F));
                    builder.AddCubicBezier(new Vector2(363.170013F, 12.04F), new Vector2(366.390015F, 14F), new Vector2(372.399994F, 14F));
                    builder.AddCubicBezier(new Vector2(378.410004F, 14F), new Vector2(381.630005F, 12.04F), new Vector2(384.290009F, 10.4099998F));
                    builder.AddLine(new Vector2(384.320007F, 10.3900003F));
                    builder.AddCubicBezier(new Vector2(386.540009F, 9.02999973F), new Vector2(388.230011F, 8F), new Vector2(392F, 8F));
                    builder.AddLine(new Vector2(392F, 0F));
                    builder.AddCubicBezier(new Vector2(385.98999F, 0F), new Vector2(382.769989F, 1.96000004F), new Vector2(380.109985F, 3.58999991F));
                    builder.AddLine(new Vector2(380.070007F, 3.6099999F));
                    builder.AddCubicBezier(new Vector2(377.850006F, 4.96999979F), new Vector2(376.170013F, 6F), new Vector2(372.399994F, 6F));
                    builder.AddCubicBezier(new Vector2(368.630005F, 6F), new Vector2(366.940002F, 4.96999979F), new Vector2(364.720001F, 3.6099999F));
                    builder.AddLine(new Vector2(364.679993F, 3.58999991F));
                    builder.AddCubicBezier(new Vector2(362.019989F, 1.96000004F), new Vector2(358.799988F, 0F), new Vector2(352.790009F, 0F));
                    builder.AddCubicBezier(new Vector2(346.779999F, 0F), new Vector2(343.570007F, 1.96000004F), new Vector2(340.910004F, 3.58999991F));
                    builder.AddLine(new Vector2(340.869995F, 3.6099999F));
                    builder.AddCubicBezier(new Vector2(338.649994F, 4.96999979F), new Vector2(336.970001F, 6F), new Vector2(333.200012F, 6F));
                    builder.AddCubicBezier(new Vector2(329.420013F, 6F), new Vector2(327.73999F, 4.96999979F), new Vector2(325.519989F, 3.6099999F));
                    builder.AddLine(new Vector2(325.480011F, 3.58999991F));
                    builder.AddCubicBezier(new Vector2(322.820007F, 1.96000004F), new Vector2(319.600006F, 0F), new Vector2(313.589996F, 0F));
                    builder.AddCubicBezier(new Vector2(307.579987F, 0F), new Vector2(304.359985F, 1.96000004F), new Vector2(301.700012F, 3.58999991F));
                    builder.AddLine(new Vector2(301.670013F, 3.6099999F));
                    builder.AddCubicBezier(new Vector2(299.450012F, 4.96999979F), new Vector2(297.76001F, 6F), new Vector2(293.98999F, 6F));
                    builder.AddCubicBezier(new Vector2(290.220001F, 6F), new Vector2(288.540009F, 4.96999979F), new Vector2(286.320007F, 3.6099999F));
                    builder.AddLine(new Vector2(286.279999F, 3.58999991F));
                    builder.AddCubicBezier(new Vector2(283.619995F, 1.96000004F), new Vector2(280.410004F, 0F), new Vector2(274.399994F, 0F));
                    builder.AddCubicBezier(new Vector2(268.390015F, 0F), new Vector2(265.170013F, 1.96000004F), new Vector2(262.51001F, 3.58999991F));
                    builder.AddLine(new Vector2(262.470001F, 3.6099999F));
                    builder.AddCubicBezier(new Vector2(260.25F, 4.96999979F), new Vector2(258.570007F, 6F), new Vector2(254.800003F, 6F));
                    builder.AddCubicBezier(new Vector2(251.029999F, 6F), new Vector2(249.339996F, 4.96999979F), new Vector2(247.119995F, 3.6099999F));
                    builder.AddLine(new Vector2(247.089996F, 3.58999991F));
                    builder.AddCubicBezier(new Vector2(244.429993F, 1.96000004F), new Vector2(241.210007F, 0F), new Vector2(235.199997F, 0F));
                    builder.AddCubicBezier(new Vector2(229.190002F, 0F), new Vector2(225.970001F, 1.96000004F), new Vector2(223.309998F, 3.58999991F));
                    builder.AddLine(new Vector2(223.270004F, 3.6099999F));
                    builder.AddCubicBezier(new Vector2(221.050003F, 4.96999979F), new Vector2(219.369995F, 6F), new Vector2(215.600006F, 6F));
                    builder.AddCubicBezier(new Vector2(211.830002F, 6F), new Vector2(210.139999F, 4.96999979F), new Vector2(207.919998F, 3.6099999F));
                    builder.AddLine(new Vector2(207.889999F, 3.58999991F));
                    builder.AddCubicBezier(new Vector2(205.229996F, 1.96000004F), new Vector2(202.009995F, 0F), new Vector2(196F, 0F));
                    builder.AddCubicBezier(new Vector2(189.990005F, 0F), new Vector2(186.770004F, 1.96000004F), new Vector2(184.110001F, 3.58999991F));
                    builder.AddLine(new Vector2(184.070007F, 3.6099999F));
                    builder.AddCubicBezier(new Vector2(181.850006F, 4.96999979F), new Vector2(180.169998F, 6F), new Vector2(176.399994F, 6F));
                    builder.AddCubicBezier(new Vector2(172.630005F, 6F), new Vector2(170.940002F, 4.96999979F), new Vector2(168.720001F, 3.6099999F));
                    builder.AddLine(new Vector2(168.679993F, 3.58999991F));
                    builder.AddCubicBezier(new Vector2(166.020004F, 1.96000004F), new Vector2(162.800003F, 0F), new Vector2(156.789993F, 0F));
                    builder.AddCubicBezier(new Vector2(150.779999F, 0F), new Vector2(147.570007F, 1.96000004F), new Vector2(144.910004F, 3.58999991F));
                    builder.AddLine(new Vector2(144.869995F, 3.6099999F));
                    builder.AddCubicBezier(new Vector2(142.649994F, 4.96999979F), new Vector2(140.970001F, 6F), new Vector2(137.199997F, 6F));
                    builder.AddCubicBezier(new Vector2(133.419998F, 6F), new Vector2(131.740005F, 4.96999979F), new Vector2(129.520004F, 3.6099999F));
                    builder.AddLine(new Vector2(129.479996F, 3.58999991F));
                    builder.AddCubicBezier(new Vector2(126.82F, 1.96000004F), new Vector2(123.599998F, 0F), new Vector2(117.589996F, 0F));
                    builder.AddCubicBezier(new Vector2(111.580002F, 0F), new Vector2(108.360001F, 1.96000004F), new Vector2(105.699997F, 3.58999991F));
                    builder.AddLine(new Vector2(105.669998F, 3.6099999F));
                    builder.AddCubicBezier(new Vector2(103.449997F, 4.96999979F), new Vector2(101.760002F, 6F), new Vector2(97.9899979F, 6F));
                    builder.AddCubicBezier(new Vector2(94.2200012F, 6F), new Vector2(92.5400009F, 4.96999979F), new Vector2(90.3199997F, 3.6099999F));
                    builder.AddLine(new Vector2(90.2799988F, 3.58999991F));
                    builder.AddCubicBezier(new Vector2(87.6200027F, 1.96000004F), new Vector2(84.4100037F, 0F), new Vector2(78.4000015F, 0F));
                    builder.AddCubicBezier(new Vector2(72.3899994F, 0F), new Vector2(69.1699982F, 1.96000004F), new Vector2(66.5100021F, 3.58999991F));
                    builder.AddLine(new Vector2(66.4700012F, 3.6099999F));
                    builder.AddCubicBezier(new Vector2(64.25F, 4.96999979F), new Vector2(62.5699997F, 6F), new Vector2(58.7999992F, 6F));
                    builder.AddCubicBezier(new Vector2(55.0299988F, 6F), new Vector2(53.3400002F, 4.96999979F), new Vector2(51.1199989F, 3.6099999F));
                    builder.AddLine(new Vector2(51.0900002F, 3.58999991F));
                    builder.AddCubicBezier(new Vector2(48.4300003F, 1.96000004F), new Vector2(45.2099991F, 0F), new Vector2(39.2000008F, 0F));
                    builder.AddCubicBezier(new Vector2(33.1899986F, 0F), new Vector2(29.9699993F, 1.96000004F), new Vector2(27.3099995F, 3.58999991F));
                    builder.AddLine(new Vector2(27.2700005F, 3.6099999F));
                    builder.AddCubicBezier(new Vector2(25.0499992F, 4.96999979F), new Vector2(23.3700008F, 6F), new Vector2(19.6000004F, 6F));
                    builder.AddCubicBezier(new Vector2(15.8299999F, 6F), new Vector2(14.1400003F, 4.96999979F), new Vector2(11.9200001F, 3.6099999F));
                    builder.AddLine(new Vector2(11.8900003F, 3.58999991F));
                    builder.AddCubicBezier(new Vector2(9.22999954F, 1.96000004F), new Vector2(6.01000023F, 0F), new Vector2(0F, 0F));
                    builder.AddLine(new Vector2(0F, 8F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Shape tree root for layer: 
            // - -  Offset:<42, 129>
            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 0F));
                    builder.AddLine(new Vector2(116F, 0F));
                    builder.AddLine(new Vector2(116F, 40F));
                    builder.AddLine(new Vector2(0F, 40F));
                    builder.AddLine(new Vector2(0F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_AlmostDodgerBlue_FF126DFF()
            {
                return (_colorBrush_AlmostDodgerBlue_FF126DFF == null)
                    ? _colorBrush_AlmostDodgerBlue_FF126DFF = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x12, 0x6D, 0xFF))
                    : _colorBrush_AlmostDodgerBlue_FF126DFF;
            }

            // - Shape tree root for layer: 
            // Offset:<42, 129>
            CompositionColorBrush ColorBrush_AlmostGainsboro_FFD9D9D9()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xD9, 0xD9, 0xD9));
            }

            // - Layer aggregator
            CompositionColorBrush ColorBrush_AlmostLavender_FFCDE1FF()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xCD, 0xE1, 0xFF));
            }

            CompositionColorBrush ColorBrush_AlmostLightBlue_FFA6C7FF()
            {
                return (_colorBrush_AlmostLightBlue_FFA6C7FF == null)
                    ? _colorBrush_AlmostLightBlue_FFA6C7FF = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xA6, 0xC7, 0xFF))
                    : _colorBrush_AlmostLightBlue_FFA6C7FF;
            }

            CompositionEffectBrush EffectBrush()
            {
                var effectFactory = EffectFactory();
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_0());
                result.SetSourceParameter("source", SurfaceBrush_1());
                return result;
            }

            CompositionEffectFactory EffectFactory()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationIn;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var result = _c.CreateEffectFactory(compositeEffect);
                return result;
            }

            // - Layer aggregator
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - Layer aggregator
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - Layer aggregator
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // - Layer aggregator
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
            }

            // - Shape tree root for layer:
            CompositionPathGeometry PathGeometry_4()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_4()));
            }

            // - Shape tree root for layer: 
            // Offset:<42, 129>
            CompositionPathGeometry PathGeometry_5()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_5()));
            }

            // Layer aggregator
            CompositionSpriteShape SpriteShape_0()
            {
                if (_spriteShape_0 != null) { return _spriteShape_0; }
                var result = _spriteShape_0 = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = ColorBrush_AlmostLightBlue_FFA6C7FF();
                return result;
            }

            // Layer aggregator
            CompositionSpriteShape SpriteShape_1()
            {
                if (_spriteShape_1 != null) { return _spriteShape_1; }
                var result = _spriteShape_1 = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = ColorBrush_AlmostDodgerBlue_FF126DFF();
                return result;
            }

            // Layer aggregator
            CompositionSpriteShape SpriteShape_2()
            {
                if (_spriteShape_2 != null) { return _spriteShape_2; }
                var result = _spriteShape_2 = _c.CreateSpriteShape(PathGeometry_2());
                result.CenterPoint = new Vector2(29F, 23F);
                result.FillBrush = ColorBrush_AlmostLavender_FFCDE1FF();
                return result;
            }

            // Layer aggregator
            CompositionSpriteShape SpriteShape_3()
            {
                if (_spriteShape_3 != null) { return _spriteShape_3; }
                var result = _spriteShape_3 = _c.CreateSpriteShape(PathGeometry_3());
                result.CenterPoint = new Vector2(29F, 23F);
                result.FillBrush = ColorBrush_AlmostLightBlue_FFA6C7FF();
                return result;
            }

            // Shape tree root for layer:
            CompositionSpriteShape SpriteShape_4()
            {
                if (_spriteShape_4 != null) { return _spriteShape_4; }
                var result = _spriteShape_4 = _c.CreateSpriteShape(PathGeometry_4());
                result.FillBrush = ColorBrush_AlmostDodgerBlue_FF126DFF();
                return result;
            }

            // Shape tree root for layer: 
            // Offset:<42, 129>
            CompositionSpriteShape SpriteShape_5()
            {
                // Offset:<42, 129>
                var geometry = PathGeometry_5();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 42F, 129F), ColorBrush_AlmostGainsboro_FFD9D9D9());;
                return result;
            }

            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(VisualSurface_0());
            }

            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(VisualSurface_1());
            }

            CompositionVisualSurface VisualSurface_0()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_0();
                result.SourceSize = new Vector2(200F, 200F);
                return result;
            }

            CompositionVisualSurface VisualSurface_1()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_1();
                result.SourceSize = new Vector2(200F, 200F);
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer:
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer:
                result.Children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                // Layer aggregator
                children.InsertAtTop(ShapeVisual_0());
                children.InsertAtTop(SpriteVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F))
                    : _cubicBezierEasingFunction_0;
            }

            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_m4_to_m4()
            {
                // Frame 0.
                if (_rotationAngleInDegreesScalarAnimation_m4_to_m4 != null) { return _rotationAngleInDegreesScalarAnimation_m4_to_m4; }
                var result = _rotationAngleInDegreesScalarAnimation_m4_to_m4 = CreateScalarKeyFrameAnimation(0F, -4F, HoldThenStepEasingFunction());
                // Frame 27.
                result.InsertKeyFrame(0.5F, 4F, CubicBezierEasingFunction_0());
                // Frame 54.
                result.InsertKeyFrame(1F, -4F, CubicBezierEasingFunction_0());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_0());
                shapes.Add(SpriteShape_1());
                shapes.Add(SpriteShape_2());
                shapes.Add(SpriteShape_3());
                return result;
            }

            // Shape tree root for layer:
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                result.Shapes.Add(SpriteShape_4());
                return result;
            }

            // Shape tree root for layer:
            ShapeVisual ShapeVisual_2()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                // Offset:<42, 129>
                result.Shapes.Add(SpriteShape_5());
                return result;
            }

            SpriteVisual SpriteVisual_0()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(200F, 200F);
                result.Brush = EffectBrush();
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            // - Layer aggregator
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(83F, 42F), HoldThenStepEasingFunction());
                // Frame 27.
                result.InsertKeyFrame(0.5F, new Vector2(83F, 46F), CubicBezierEasingFunction_0());
                // Frame 54.
                result.InsertKeyFrame(1F, new Vector2(83F, 42F), CubicBezierEasingFunction_0());
                return result;
            }

            // - Layer aggregator
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(65F, 65F), HoldThenStepEasingFunction());
                // Frame 27.
                result.InsertKeyFrame(0.5F, new Vector2(65F, 72F), CubicBezierEasingFunction_0());
                // Frame 54.
                result.InsertKeyFrame(1F, new Vector2(65F, 65F), CubicBezierEasingFunction_0());
                return result;
            }

            // - Layer aggregator
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_2()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(99.9199982F, 85.8199997F), HoldThenStepEasingFunction());
                // Frame 27.
                result.InsertKeyFrame(0.5F, new Vector2(99.9300003F, 94.0699997F), CubicBezierEasingFunction_0());
                // Frame 54.
                result.InsertKeyFrame(1F, new Vector2(99.9199982F, 85.8600006F), CubicBezierEasingFunction_0());
                return result;
            }

            // - Layer aggregator
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_3()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(42.0800018F, 90.1800003F), HoldThenStepEasingFunction());
                // Frame 27.
                result.InsertKeyFrame(0.5F, new Vector2(42.0699997F, 89.9300003F), CubicBezierEasingFunction_0());
                // Frame 54.
                result.InsertKeyFrame(1F, new Vector2(42.0800018F, 90.1399994F), CubicBezierEasingFunction_0());
                return result;
            }

            // - Shape tree root for layer: 
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_4()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(42F, 142F), HoldThenStepEasingFunction());
                // Frame 27.
                result.InsertKeyFrame(0.5F, new Vector2(-33F, 142F), CubicBezierEasingFunction_0());
                // Frame 54.
                result.InsertKeyFrame(1F, new Vector2(-116F, 142F), CubicBezierEasingFunction_0());
                return result;
            }

            internal AmS7nmujvm_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _spriteShape_0.StartAnimation("Offset", OffsetVector2Animation_0(), AnimationController_0());
                _spriteShape_1.StartAnimation("Offset", OffsetVector2Animation_1(), AnimationController_0());
                _spriteShape_2.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_m4_to_m4(), AnimationController_0());
                _spriteShape_2.StartAnimation("Offset", OffsetVector2Animation_2(), AnimationController_0());
                _spriteShape_3.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_m4_to_m4(), AnimationController_0());
                _spriteShape_3.StartAnimation("Offset", OffsetVector2Animation_3(), AnimationController_0());
                _spriteShape_4.StartAnimation("Offset", OffsetVector2Animation_4(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _spriteShape_0.StopAnimation("Offset");
                _spriteShape_1.StopAnimation("Offset");
                _spriteShape_2.StopAnimation("RotationAngleInDegrees");
                _spriteShape_2.StopAnimation("Offset");
                _spriteShape_3.StopAnimation("RotationAngleInDegrees");
                _spriteShape_3.StopAnimation("Offset");
                _spriteShape_4.StopAnimation("Offset");
            }

        }
    }
}
